// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteWeatherApi.Data.Context;

#nullable disable

namespace TesteWeatherApi.Migrations
{
    [DbContext(typeof(ContextEntity))]
    [Migration("20231102053543_bd")]
    partial class bd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TesteWeatherApi.Data.Models.BaseWeatherEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cod")
                        .HasColumnType("int");

                    b.Property<int>("Dt")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timezone")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseWeather");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.CloudsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("All")
                        .HasColumnType("int");

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId")
                        .IsUnique();

                    b.ToTable("Clouds");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.CoordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lon")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId")
                        .IsUnique();

                    b.ToTable("Coord");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.MainEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.Property<float>("Feels_like")
                        .HasColumnType("real");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<float>("Temp")
                        .HasColumnType("real");

                    b.Property<float>("Temp_max")
                        .HasColumnType("real");

                    b.Property<float>("Temp_min")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId")
                        .IsUnique();

                    b.ToTable("Main");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.RainEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.Property<float>("_1H")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId")
                        .IsUnique();

                    b.ToTable("Rain");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.SysEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sunrise")
                        .HasColumnType("int");

                    b.Property<int>("Sunset")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId")
                        .IsUnique();

                    b.ToTable("Sys");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.WeatherEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.WindEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseWeatherEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Deg")
                        .HasColumnType("int");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BaseWeatherEntityId")
                        .IsUnique();

                    b.ToTable("Wind");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.CloudsEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithOne("Clouds")
                        .HasForeignKey("TesteWeatherApi.Data.Models.CloudsEntity", "BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.CoordEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithOne("Coord")
                        .HasForeignKey("TesteWeatherApi.Data.Models.CoordEntity", "BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.MainEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithOne("Main")
                        .HasForeignKey("TesteWeatherApi.Data.Models.MainEntity", "BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.RainEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithOne("Rain")
                        .HasForeignKey("TesteWeatherApi.Data.Models.RainEntity", "BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.SysEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithOne("Sys")
                        .HasForeignKey("TesteWeatherApi.Data.Models.SysEntity", "BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.WeatherEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithMany("Weather")
                        .HasForeignKey("BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.WindEntity", b =>
                {
                    b.HasOne("TesteWeatherApi.Data.Models.BaseWeatherEntity", "BaseWeatherEntity")
                        .WithOne("Wind")
                        .HasForeignKey("TesteWeatherApi.Data.Models.WindEntity", "BaseWeatherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseWeatherEntity");
                });

            modelBuilder.Entity("TesteWeatherApi.Data.Models.BaseWeatherEntity", b =>
                {
                    b.Navigation("Clouds")
                        .IsRequired();

                    b.Navigation("Coord")
                        .IsRequired();

                    b.Navigation("Main")
                        .IsRequired();

                    b.Navigation("Rain")
                        .IsRequired();

                    b.Navigation("Sys")
                        .IsRequired();

                    b.Navigation("Weather");

                    b.Navigation("Wind")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
